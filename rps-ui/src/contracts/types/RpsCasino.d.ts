/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RpsCasinoInterface extends ethers.utils.Interface {
  functions: {
    "NUM_WORDS()": FunctionFragment;
    "bet(uint8)": FunctionFragment;
    "betDetailById(uint256)": FunctionFragment;
    "betListByAddress(address,uint256)": FunctionFragment;
    "callbackGasLimit()": FunctionFragment;
    "chainlinkSubId()": FunctionFragment;
    "checkClaimableAmount(uint256)": FunctionFragment;
    "claimBet(uint256)": FunctionFragment;
    "coordinator()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "getBetListByAddress(address)": FunctionFragment;
    "keyHash()": FunctionFragment;
    "linkAddress()": FunctionFragment;
    "linkToken()": FunctionFragment;
    "maxBettableAmount()": FunctionFragment;
    "maxOwnerWithdrawableAmount()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestConfirmations()": FunctionFragment;
    "totalBetLocked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "vrfCoordinatorAddress()": FunctionFragment;
    "withdrawFunds(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NUM_WORDS", values?: undefined): string;
  encodeFunctionData(functionFragment: "bet", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "betDetailById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "betListByAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkSubId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkClaimableAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "coordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBetListByAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "keyHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "linkAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "linkToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxBettableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxOwnerWithdrawableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBetLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vrfCoordinatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "NUM_WORDS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "betDetailById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "betListByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkSubId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "coordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBetListByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keyHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "linkToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxBettableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxOwnerWithdrawableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBetLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vrfCoordinatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "BetClaimed(uint256,uint256)": EventFragment;
    "BetPlaced(uint256,uint256)": EventFragment;
    "FundsWithdrawn(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BetClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BetPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type BetClaimedEvent = TypedEvent<
  [BigNumber, BigNumber] & { betId: BigNumber; amount: BigNumber }
>;

export type BetPlacedEvent = TypedEvent<
  [BigNumber, BigNumber] & { betId: BigNumber; amount: BigNumber }
>;

export type FundsWithdrawnEvent = TypedEvent<
  [string, BigNumber] & { withdrawnTo: string; amount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class RpsCasino extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RpsCasinoInterface;

  functions: {
    NUM_WORDS(overrides?: CallOverrides): Promise<[number]>;

    bet(
      _choice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    betDetailById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, number, boolean, boolean] & {
        amount: BigNumber;
        bettor: string;
        bettorChoice: number;
        platformChoice: number;
        claimed: boolean;
        platformChoiceReady: boolean;
      }
    >;

    betListByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    callbackGasLimit(overrides?: CallOverrides): Promise<[number]>;

    chainlinkSubId(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkClaimableAmount(
      _betId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimBet(
      _betId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    coordinator(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBetListByAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    keyHash(overrides?: CallOverrides): Promise<[string]>;

    linkAddress(overrides?: CallOverrides): Promise<[string]>;

    linkToken(overrides?: CallOverrides): Promise<[string]>;

    maxBettableAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxOwnerWithdrawableAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestConfirmations(overrides?: CallOverrides): Promise<[number]>;

    totalBetLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vrfCoordinatorAddress(overrides?: CallOverrides): Promise<[string]>;

    withdrawFunds(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  NUM_WORDS(overrides?: CallOverrides): Promise<number>;

  bet(
    _choice: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  betDetailById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, number, number, boolean, boolean] & {
      amount: BigNumber;
      bettor: string;
      bettorChoice: number;
      platformChoice: number;
      claimed: boolean;
      platformChoiceReady: boolean;
    }
  >;

  betListByAddress(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callbackGasLimit(overrides?: CallOverrides): Promise<number>;

  chainlinkSubId(overrides?: CallOverrides): Promise<BigNumber>;

  checkClaimableAmount(
    _betId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimBet(
    _betId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  coordinator(overrides?: CallOverrides): Promise<string>;

  deposit(
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBetListByAddress(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  keyHash(overrides?: CallOverrides): Promise<string>;

  linkAddress(overrides?: CallOverrides): Promise<string>;

  linkToken(overrides?: CallOverrides): Promise<string>;

  maxBettableAmount(overrides?: CallOverrides): Promise<BigNumber>;

  maxOwnerWithdrawableAmount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  rawFulfillRandomWords(
    requestId: BigNumberish,
    randomWords: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestConfirmations(overrides?: CallOverrides): Promise<number>;

  totalBetLocked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vrfCoordinatorAddress(overrides?: CallOverrides): Promise<string>;

  withdrawFunds(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NUM_WORDS(overrides?: CallOverrides): Promise<number>;

    bet(_choice: BigNumberish, overrides?: CallOverrides): Promise<void>;

    betDetailById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, number, boolean, boolean] & {
        amount: BigNumber;
        bettor: string;
        bettorChoice: number;
        platformChoice: number;
        claimed: boolean;
        platformChoiceReady: boolean;
      }
    >;

    betListByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callbackGasLimit(overrides?: CallOverrides): Promise<number>;

    chainlinkSubId(overrides?: CallOverrides): Promise<BigNumber>;

    checkClaimableAmount(
      _betId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBet(_betId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    coordinator(overrides?: CallOverrides): Promise<string>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getBetListByAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    keyHash(overrides?: CallOverrides): Promise<string>;

    linkAddress(overrides?: CallOverrides): Promise<string>;

    linkToken(overrides?: CallOverrides): Promise<string>;

    maxBettableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxOwnerWithdrawableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestConfirmations(overrides?: CallOverrides): Promise<number>;

    totalBetLocked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vrfCoordinatorAddress(overrides?: CallOverrides): Promise<string>;

    withdrawFunds(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BetClaimed(uint256,uint256)"(
      betId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { betId: BigNumber; amount: BigNumber }
    >;

    BetClaimed(
      betId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { betId: BigNumber; amount: BigNumber }
    >;

    "BetPlaced(uint256,uint256)"(
      betId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { betId: BigNumber; amount: BigNumber }
    >;

    BetPlaced(
      betId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { betId: BigNumber; amount: BigNumber }
    >;

    "FundsWithdrawn(address,uint256)"(
      withdrawnTo?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { withdrawnTo: string; amount: BigNumber }
    >;

    FundsWithdrawn(
      withdrawnTo?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { withdrawnTo: string; amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    NUM_WORDS(overrides?: CallOverrides): Promise<BigNumber>;

    bet(
      _choice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    betDetailById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    betListByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkSubId(overrides?: CallOverrides): Promise<BigNumber>;

    checkClaimableAmount(
      _betId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBet(
      _betId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    coordinator(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBetListByAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keyHash(overrides?: CallOverrides): Promise<BigNumber>;

    linkAddress(overrides?: CallOverrides): Promise<BigNumber>;

    linkToken(overrides?: CallOverrides): Promise<BigNumber>;

    maxBettableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxOwnerWithdrawableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestConfirmations(overrides?: CallOverrides): Promise<BigNumber>;

    totalBetLocked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vrfCoordinatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NUM_WORDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bet(
      _choice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    betDetailById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    betListByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callbackGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainlinkSubId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkClaimableAmount(
      _betId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimBet(
      _betId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    coordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBetListByAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    linkAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    linkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxBettableAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxOwnerWithdrawableAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestConfirmations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBetLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vrfCoordinatorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
